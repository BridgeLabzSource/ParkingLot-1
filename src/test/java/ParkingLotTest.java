import com.bridgelabz.parkinglot.enums.DriverType;import com.bridgelabz.parkinglot.exception.ParkingLotException;import com.bridgelabz.parkinglot.model.slotDetails;import com.bridgelabz.parkinglot.observer.AirportSecurityImpl;import com.bridgelabz.parkinglot.observer.ParkingOwnerImpl;import com.bridgelabz.parkinglot.service.ParkingLot;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;public class ParkingLotTest {    ParkingLot parkingLot;    @Before    public void setUp() {        parkingLot = new ParkingLot(100, 4);    }    @Test    public void givenAVehicle_IfParked_ShouldReturnTrue() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            boolean parkingStatus = ParkingLot.LatestVehicleStatus;            Assert.assertTrue(parkingStatus);        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_ALREADY_PARKED, e.type);        }    }    @Test    public void givenAVehicle_IfUnParked_ShouldReturnFalse() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-1111", DriverType.NON_HANDICAP_DRIVER));            parkingLot.unPark("MH-2222");            boolean unParkingStatus = ParkingLot.LatestVehicleStatus;            Assert.assertFalse(unParkingStatus);        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_ALREADY_PARKED, e.type);            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_NOT_PARKED, e.type);        }    }    @Test    public void givenAVehicle_IfNotPresentAndWantToUnParke_ShouldHandleException() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.unPark("MH-1111");        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_NOT_PARKED, e.type);        }    }    @Test    public void givenVehicle_IfParkingLotIsFull_ShouldHandleException() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-1111", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-3333", DriverType.NON_HANDICAP_DRIVER));        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.PARKING_LOT_IS_FULL, e.type);        }    }    @Test    public void givenVehicle_IfParkingLotIsFullInformToOwner_ShouldHandleException() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-1111", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-3333", DriverType.NON_HANDICAP_DRIVER));        } catch (ParkingLotException e) {            Assert.assertTrue(ParkingOwnerImpl.status);            Assert.assertEquals(ParkingLotException.ExceptionType.PARKING_LOT_IS_FULL, e.type);        }    }    @Test    public void givenVehicle_IfAlreadyPresent_ShouldHandleException() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_ALREADY_PARKED, e.type);        }    }    @Test    public void givenVehicle_IfParkingLotIsFullInformToAirportSecurity_ShouldHandleException() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-1111", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-3333", DriverType.NON_HANDICAP_DRIVER));        } catch (ParkingLotException e) {            Assert.assertTrue(AirportSecurityImpl.status);            Assert.assertEquals(ParkingLotException.ExceptionType.PARKING_LOT_IS_FULL, e.type);        }    }    @Test    public void givenVehicle_IfParkingLotNowAvailable_ShouldReturnFalse() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-1111", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-3333", DriverType.NON_HANDICAP_DRIVER));        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.PARKING_LOT_IS_FULL, e.type);            try {                parkingLot.unPark("MH-1111");            } catch (ParkingLotException exception) {                exception.printStackTrace();            }            Assert.assertFalse(ParkingOwnerImpl.status);        }    }    @Test    public void givenVehicle_IfSpaceIsAvailable_ShouldUpdateParkingLotNumberNoToOwner() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            int slotNo = parkingLot.allocateAvailableLot(new slotDetails("MH-3333", DriverType.NON_HANDICAP_DRIVER));            Assert.assertEquals(101, slotNo);        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_ALREADY_PARKED, e.type);        }    }    @Test    public void givenVehicle_AlreadyParkedAndWantsToAllocateLot_ShouldHandleException() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.allocateAvailableLot(new slotDetails("MH-3333", DriverType.NON_HANDICAP_DRIVER));        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_ALREADY_PARKED, e.type);        }    }    @Test    public void givenVehicle_CheckVehiclePresentOrNotIfParked_ShouldReturnParkingLotNumber() {        try {            parkingLot.park(new slotDetails("A", DriverType.NON_HANDICAP_DRIVER));            boolean lotNo = parkingLot.isMyVehiclePresent("A");            Assert.assertTrue(lotNo);        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_NOT_PARKED, e.type);        }    }    @Test    public void givenVehicle_CheckVehiclePresentOrNotIfNotParked_ShouldHandleException() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            boolean parkingStatusOfVehicle = parkingLot.isMyVehiclePresent("MH-2222");            Assert.assertTrue(parkingStatusOfVehicle);        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_NOT_PARKED, e.type);        }    }    @Test    public void givenVehicleDetails_IfVehicleIsParkedAlready_ShouldReturnParkingTime() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-1111", DriverType.NON_HANDICAP_DRIVER));            LocalDateTime parkedTime = parkingLot.vehicleArrivedTime("MH-1111");            DateTimeFormatter format1 = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");            String parkedDateTime = parkedTime.format(format1);            LocalDateTime currentTime = LocalDateTime.now();            DateTimeFormatter format2 = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");            String currentDateTime = currentTime.format(format2);            Assert.assertEquals(parkedDateTime, currentDateTime);        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_NOT_PARKED, e.type);        }    }    @Test    public void givenVehicleDetails_IfVehicleIsNotParkedWhileCheckingForVehicleTiming_ShouldReturnHandleException() {        try {            parkingLot.park(new slotDetails("MH-2222", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-6666", DriverType.NON_HANDICAP_DRIVER));            parkingLot.vehicleArrivedTime("MH-1111");        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_NOT_PARKED, e.type);        }    }    @Test    public void givenVehicleDetails_IfVehicleParked_ShouldParkEvenly() {        try {            parkingLot.park(new slotDetails("MH-11", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-22", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-33", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-44", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-55", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-66", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-67", DriverType.NON_HANDICAP_DRIVER));            int lotNo = ParkingOwnerImpl.lotNum;            Assert.assertEquals(3, lotNo);        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_ALREADY_PARKED, e.type);        }    }    @Test    public void givenVehicleDetails_IfVehicleAlreadyParked_ShouldHandleException() {        try {            parkingLot.park(new slotDetails("MH-11", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-22", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-33", DriverType.NON_HANDICAP_DRIVER));            parkingLot.allocateAvailableLot(new slotDetails("MH-33", DriverType.NON_HANDICAP_DRIVER));        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_ALREADY_PARKED, e.type);        }    }    @Test    public void givenVehicle_IfDriverTypeIsHandicap_ShouldParkToNearestLot() {        try {            parkingLot.park(new slotDetails("MH-11", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-22", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-33", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-44", DriverType.HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-55", DriverType.NON_HANDICAP_DRIVER));            int lotNo1 = ParkingOwnerImpl.lotNum;            Assert.assertEquals(4, lotNo1);        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_ALREADY_PARKED, e.type);        }    }    @Test    public void givenVehicle_IfVehicleDriverTypeIsHandicap_ShouldParkToNearestLot() {        try {            parkingLot.park(new slotDetails("MH-11", DriverType.NON_HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-44", DriverType.HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-33", DriverType.HANDICAP_DRIVER));            parkingLot.park(new slotDetails("MH-55", DriverType.NON_HANDICAP_DRIVER));            int allottedLotNo = ParkingOwnerImpl.lotNum;            Assert.assertEquals(2, allottedLotNo);        } catch (ParkingLotException e) {            Assert.assertEquals(ParkingLotException.ExceptionType.VEHICLE_ALREADY_PARKED, e.type);        }    }}